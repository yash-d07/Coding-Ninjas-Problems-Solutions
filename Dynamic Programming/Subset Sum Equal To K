#include <bits/stdc++.h> 

// Memoization

bool solution(int index, int target, vector<int> &array, vector<vector<int>> &dp)
{
    if(target==0) return true;
    if(index==0) return (array[0]==target);
    if(dp[index][target]!=-1) return dp[index][target];
    bool nottake = solution(index-1,target,array,dp);
    bool take = false;
    if(array[index]<=target)
    {
        take = solution(index-1,target - array[index],array,dp);
    }  
    return dp[index][target] = take|nottake;
}

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp(n,vector<bool>(k+1,0));
    return solution(n-1,k,arr,dp);
    }
    
// Tabulation

bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<bool>> dp(n,vector<bool>(k+1,0));
    
    for(int i=0;i<n;i++) dp[i][0] = true;
    dp[0][arr[0]] = true;
    
    for(int ind = 1; ind<n; ind++)
    {
        for(int target=1;target<=k; target++)
        {
             bool nottake = dp[ind-1][target];
             bool take = false;
             if(arr[ind]<=target)
             {
                take = dp[ind-1][target - arr[ind]];
             } 
                dp[ind][target] = take|nottake;
        }
    }
    return dp[n-1][k];
}
